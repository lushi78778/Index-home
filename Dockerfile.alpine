# syntax=docker/dockerfile:1
# Alternative Dockerfile with optimized Alpine build

# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --silent

# Copy source code
COPY . .

# Generate config from example (fallback for build)
RUN if [ ! -f config.yaml ]; then cp config.example.yaml config.yaml; fi

# Generate site config
RUN npm run config

# Build application with standalone output
RUN npm run build

# Production stage - optimized Alpine
FROM node:20-alpine AS runner

# Add build arguments
ARG BUILDTIME
ARG VERSION
ARG REVISION

# Add labels
LABEL org.opencontainers.image.title="Index-home"
LABEL org.opencontainers.image.description="Next.js content portal with Yuque integration"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.created="${BUILDTIME}"
LABEL org.opencontainers.image.revision="${REVISION}"
LABEL org.opencontainers.image.source="https://github.com/lushi78778/Index-home"
LABEL org.opencontainers.image.url="https://github.com/lushi78778/Index-home"
LABEL org.opencontainers.image.documentation="https://github.com/lushi78778/Index-home#readme"

WORKDIR /app

# Install only essential runtime packages
RUN apk add --no-cache dumb-init tini \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs

# Copy built application with correct ownership in single layer
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV NODE_ENV=production

# Use tini for proper signal handling (lighter than dumb-init)
ENTRYPOINT ["tini", "--"]
CMD ["node", "server.js"]